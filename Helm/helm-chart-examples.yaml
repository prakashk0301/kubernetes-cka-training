# Complete Helm Chart Examples
# This file contains comprehensive examples for creating and managing Helm charts

---
# Example 1: Simple Web Application Chart
# Create this structure: helm create webapp

# Chart.yaml for webapp
apiVersion: v2
name: webapp
description: A modern web application Helm chart
type: application
version: 1.0.0
appVersion: "2.1.0"

maintainers:
  - name: DevOps Team
    email: devops@example.com

keywords:
  - web
  - application
  - microservice

home: https://github.com/example/webapp
sources:
  - https://github.com/example/webapp

---
# values.yaml for webapp
replicaCount: 3

image:
  repository: nginx
  pullPolicy: IfNotPresent
  tag: "1.25-alpine"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  create: true
  annotations: {}
  name: ""

podAnnotations: {}

podSecurityContext:
  fsGroup: 2000
  runAsNonRoot: true
  runAsUser: 1000

securityContext:
  allowPrivilegeEscalation: false
  capabilities:
    drop:
    - ALL
  readOnlyRootFilesystem: true

service:
  type: ClusterIP
  port: 80
  targetPort: 8080

ingress:
  enabled: true
  className: "nginx"
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
  hosts:
    - host: webapp.example.com
      paths:
        - path: /
          pathType: Prefix
  tls:
    - secretName: webapp-tls
      hosts:
        - webapp.example.com

resources:
  limits:
    cpu: 500m
    memory: 512Mi
  requests:
    cpu: 250m
    memory: 256Mi

autoscaling:
  enabled: true
  minReplicas: 2
  maxReplicas: 10
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity:
  podAntiAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
    - weight: 100
      podAffinityTerm:
        labelSelector:
          matchExpressions:
          - key: app.kubernetes.io/name
            operator: In
            values:
            - webapp
        topologyKey: kubernetes.io/hostname

# Application specific configuration
config:
  env: production
  database:
    host: postgres-service
    port: 5432
    name: webapp_db
  redis:
    host: redis-service
    port: 6379
  
# Health check configuration
healthCheck:
  enabled: true
  path: /health
  initialDelaySeconds: 30
  periodSeconds: 10

---
# templates/deployment.yaml for webapp
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "webapp.fullname" . }}
  labels:
    {{- include "webapp.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "webapp.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
        {{- with .Values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      labels:
        {{- include "webapp.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "webapp.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: {{ .Values.service.targetPort }}
              protocol: TCP
          env:
            - name: APP_ENV
              value: {{ .Values.config.env | quote }}
            - name: DB_HOST
              value: {{ .Values.config.database.host | quote }}
            - name: DB_PORT
              value: {{ .Values.config.database.port | quote }}
            - name: DB_NAME
              value: {{ .Values.config.database.name | quote }}
            - name: REDIS_HOST
              value: {{ .Values.config.redis.host | quote }}
            - name: REDIS_PORT
              value: {{ .Values.config.redis.port | quote }}
          {{- if .Values.healthCheck.enabled }}
          livenessProbe:
            httpGet:
              path: {{ .Values.healthCheck.path }}
              port: http
            initialDelaySeconds: {{ .Values.healthCheck.initialDelaySeconds }}
            periodSeconds: {{ .Values.healthCheck.periodSeconds }}
          readinessProbe:
            httpGet:
              path: {{ .Values.healthCheck.path }}
              port: http
            initialDelaySeconds: 5
            periodSeconds: 5
          {{- end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
            - name: config
              mountPath: /etc/webapp
              readOnly: true
            - name: temp
              mountPath: /tmp
      volumes:
        - name: config
          configMap:
            name: {{ include "webapp.fullname" . }}-config
        - name: temp
          emptyDir: {}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}

---
# templates/configmap.yaml for webapp
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "webapp.fullname" . }}-config
  labels:
    {{- include "webapp.labels" . | nindent 4 }}
data:
  app.properties: |
    environment={{ .Values.config.env }}
    database.host={{ .Values.config.database.host }}
    database.port={{ .Values.config.database.port }}
    database.name={{ .Values.config.database.name }}
    redis.host={{ .Values.config.redis.host }}
    redis.port={{ .Values.config.redis.port }}
    
  nginx.conf: |
    server {
        listen {{ .Values.service.targetPort }};
        server_name localhost;
        
        location {{ .Values.healthCheck.path }} {
            access_log off;
            return 200 "healthy\n";
        }
        
        location / {
            root /usr/share/nginx/html;
            index index.html index.htm;
            try_files $uri $uri/ /index.html;
        }
        
        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
            root /usr/share/nginx/html;
        }
    }

---
# templates/hpa.yaml for webapp
{{- if .Values.autoscaling.enabled }}
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: {{ include "webapp.fullname" . }}
  labels:
    {{- include "webapp.labels" . | nindent 4 }}
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: {{ include "webapp.fullname" . }}
  minReplicas: {{ .Values.autoscaling.minReplicas }}
  maxReplicas: {{ .Values.autoscaling.maxReplicas }}
  metrics:
    {{- if .Values.autoscaling.targetCPUUtilizationPercentage }}
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: {{ .Values.autoscaling.targetCPUUtilizationPercentage }}
    {{- end }}
    {{- if .Values.autoscaling.targetMemoryUtilizationPercentage }}
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: {{ .Values.autoscaling.targetMemoryUtilizationPercentage }}
    {{- end }}
{{- end }}

---
# Example 2: Database Chart with Dependencies

# Chart.yaml for database-stack
apiVersion: v2
name: database-stack
description: Complete database stack with PostgreSQL and Redis
type: application
version: 2.0.0
appVersion: "1.0.0"

dependencies:
  - name: postgresql
    version: 12.1.2
    repository: https://charts.bitnami.com/bitnami
    condition: postgresql.enabled
  - name: redis
    version: 17.4.3
    repository: https://charts.bitnami.com/bitnami
    condition: redis.enabled

---
# values.yaml for database-stack
postgresql:
  enabled: true
  auth:
    postgresPassword: "secure-postgres-password"
    database: "myapp"
    username: "myapp"
    password: "secure-user-password"
  primary:
    persistence:
      enabled: true
      size: 20Gi
      storageClass: "fast-ssd"
    resources:
      requests:
        memory: "512Mi"
        cpu: "500m"
      limits:
        memory: "1Gi"
        cpu: "1000m"
  metrics:
    enabled: true
    serviceMonitor:
      enabled: true

redis:
  enabled: true
  auth:
    enabled: true
    password: "secure-redis-password"
  master:
    persistence:
      enabled: true
      size: 10Gi
      storageClass: "fast-ssd"
    resources:
      requests:
        memory: "256Mi"
        cpu: "250m"
      limits:
        memory: "512Mi"
        cpu: "500m"
  replica:
    replicaCount: 2
    persistence:
      enabled: true
      size: 10Gi
  metrics:
    enabled: true
    serviceMonitor:
      enabled: true

# Backup configuration
backup:
  enabled: true
  schedule: "0 2 * * *"
  retention: "30d"
  storage:
    type: "s3"
    bucket: "my-backup-bucket"
    region: "us-west-2"

---
# Example 3: Microservices Chart with Multiple Components

# Chart.yaml for microservices-app
apiVersion: v2
name: microservices-app
description: Complete microservices application
type: application
version: 3.0.0
appVersion: "1.5.0"

dependencies:
  - name: postgresql
    version: 12.1.2
    repository: https://charts.bitnami.com/bitnami
    condition: postgresql.enabled
  - name: redis
    version: 17.4.3
    repository: https://charts.bitnami.com/bitnami
    condition: redis.enabled
  - name: rabbitmq
    version: 11.1.4
    repository: https://charts.bitnami.com/bitnami
    condition: rabbitmq.enabled

---
# values.yaml for microservices-app
global:
  imageRegistry: "my-registry.example.com"
  storageClass: "fast-ssd"
  monitoring:
    enabled: true

# Service configurations
services:
  api:
    enabled: true
    replicaCount: 3
    image:
      repository: "microservices/api"
      tag: "v1.5.0"
    service:
      type: ClusterIP
      port: 80
      targetPort: 8080
    ingress:
      enabled: true
      host: "api.example.com"
    resources:
      requests:
        memory: "512Mi"
        cpu: "500m"
      limits:
        memory: "1Gi"
        cpu: "1000m"

  worker:
    enabled: true
    replicaCount: 2
    image:
      repository: "microservices/worker"
      tag: "v1.5.0"
    resources:
      requests:
        memory: "256Mi"
        cpu: "250m"
      limits:
        memory: "512Mi"
        cpu: "500m"

  frontend:
    enabled: true
    replicaCount: 2
    image:
      repository: "microservices/frontend"
      tag: "v1.5.0"
    service:
      type: ClusterIP
      port: 80
      targetPort: 3000
    ingress:
      enabled: true
      host: "app.example.com"
    resources:
      requests:
        memory: "128Mi"
        cpu: "100m"
      limits:
        memory: "256Mi"
        cpu: "500m"

# Database dependencies
postgresql:
  enabled: true
  auth:
    postgresPassword: "postgres-secret"
    database: "microservices"
    username: "app"
    password: "app-secret"

redis:
  enabled: true
  auth:
    enabled: true
    password: "redis-secret"

rabbitmq:
  enabled: true
  auth:
    username: "user"
    password: "rabbitmq-secret"

---
# Example 4: Testing Chart with Hooks

# templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "{{ include "webapp.fullname" . }}-test-connection"
  labels:
    {{- include "webapp.labels" . | nindent 4 }}
  annotations:
    "helm.sh/hook": test
    "helm.sh/hook-weight": "1"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
spec:
  restartPolicy: Never
  containers:
    - name: wget
      image: busybox:1.36
      command: ['wget']
      args: ['{{ include "webapp.fullname" . }}:{{ .Values.service.port }}{{ .Values.healthCheck.path }}']
      resources:
        requests:
          memory: "64Mi"
          cpu: "50m"
        limits:
          memory: "128Mi"
          cpu: "100m"

---
# templates/tests/test-database.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "{{ include "webapp.fullname" . }}-test-database"
  labels:
    {{- include "webapp.labels" . | nindent 4 }}
  annotations:
    "helm.sh/hook": test
    "helm.sh/hook-weight": "2"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
spec:
  restartPolicy: Never
  containers:
    - name: postgres-test
      image: postgres:15-alpine
      command:
        - /bin/bash
        - -c
        - |
          export PGPASSWORD={{ .Values.config.database.password }}
          psql -h {{ .Values.config.database.host }} -U {{ .Values.config.database.username }} -d {{ .Values.config.database.name }} -c "SELECT 1;"
      env:
        - name: PGPASSWORD
          value: {{ .Values.config.database.password | quote }}
      resources:
        requests:
          memory: "128Mi"
          cpu: "100m"
        limits:
          memory: "256Mi"
          cpu: "200m"

---
# Example 5: Pre/Post Installation Hooks

# templates/hooks/pre-install-job.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: "{{ include "webapp.fullname" . }}-pre-install"
  labels:
    {{- include "webapp.labels" . | nindent 4 }}
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
spec:
  template:
    metadata:
      name: "{{ include "webapp.fullname" . }}-pre-install"
      labels:
        {{- include "webapp.labels" . | nindent 8 }}
    spec:
      restartPolicy: Never
      containers:
      - name: pre-install-job
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
        command:
          - /bin/sh
          - -c
          - |
            echo "Running pre-installation tasks..."
            # Database migration
            echo "Running database migrations..."
            sleep 10
            echo "Pre-installation completed successfully!"
        env:
          - name: DB_HOST
            value: {{ .Values.config.database.host | quote }}
          - name: DB_NAME
            value: {{ .Values.config.database.name | quote }}
        resources:
          requests:
            memory: "256Mi"
            cpu: "200m"
          limits:
            memory: "512Mi"
            cpu: "500m"

---
# templates/hooks/post-install-job.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: "{{ include "webapp.fullname" . }}-post-install"
  labels:
    {{- include "webapp.labels" . | nindent 4 }}
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-weight": "5"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
spec:
  template:
    metadata:
      name: "{{ include "webapp.fullname" . }}-post-install"
      labels:
        {{- include "webapp.labels" . | nindent 8 }}
    spec:
      restartPolicy: Never
      containers:
      - name: post-install-job
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
        command:
          - /bin/sh
          - -c
          - |
            echo "Running post-installation tasks..."
            # Seed initial data
            echo "Seeding initial data..."
            sleep 5
            # Warm up cache
            echo "Warming up application cache..."
            curl -f http://{{ include "webapp.fullname" . }}:{{ .Values.service.port }}/health
            echo "Post-installation completed successfully!"
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"

---
# Example 6: NetworkPolicy and SecurityContext

# templates/networkpolicy.yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: {{ include "webapp.fullname" . }}-netpol
  labels:
    {{- include "webapp.labels" . | nindent 4 }}
spec:
  podSelector:
    matchLabels:
      {{- include "webapp.selectorLabels" . | nindent 6 }}
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-system
    - podSelector:
        matchLabels:
          app.kubernetes.io/name: ingress-nginx
    ports:
    - protocol: TCP
      port: {{ .Values.service.targetPort }}
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          name: database
    ports:
    - protocol: TCP
      port: 5432
  - to:
    - namespaceSelector:
        matchLabels:
          name: cache
    ports:
    - protocol: TCP
      port: 6379
  - to: []
    ports:
    - protocol: TCP
      port: 53
    - protocol: UDP
      port: 53

---
# Example 7: PodDisruptionBudget

# templates/poddisruptionbudget.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: {{ include "webapp.fullname" . }}-pdb
  labels:
    {{- include "webapp.labels" . | nindent 4 }}
spec:
  minAvailable: {{ if gt (.Values.replicaCount | int) 1 }}1{{ else }}0{{ end }}
  selector:
    matchLabels:
      {{- include "webapp.selectorLabels" . | nindent 6 }}

---
# Example 8: ServiceMonitor for Prometheus

# templates/servicemonitor.yaml
{{- if and .Values.global.monitoring.enabled .Values.metrics.enabled }}
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: {{ include "webapp.fullname" . }}
  labels:
    {{- include "webapp.labels" . | nindent 4 }}
spec:
  selector:
    matchLabels:
      {{- include "webapp.selectorLabels" . | nindent 6 }}
  endpoints:
  - port: http
    path: /metrics
    interval: 30s
    scrapeTimeout: 10s
{{- end }}
